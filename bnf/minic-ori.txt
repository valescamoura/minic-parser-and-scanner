FunctionList  -> Functionlist Function
                 | ε
Function      ->  Type identifier ( ArgList ) FunctionBody
FunctionCall  ->  identifier ( IdentList )
ArgList       ->  Arg
                  | ArgList , Arg
Arg           ->  Type identifier
Declaration   ->  Type IdentList ;
Type          ->  int
                  | float
IdentList     ->  identifier , IdentList
                  identifier
Stmt          ->  ForStmt
                  | WhileStmt
                  | Expr ;
                  | IfStmt
                  | CompoundStmt
                  | Declaration
                  | FunctionCall ;#Isso faz sentido ?
                  | ;
ForStmt       ->  for ( Expr ; OptExpr ; OptExpr ) Stmt
OptExpr       ->  Expr
                  | ε
WhileStmt     ->  while ( Expr ) Stmt
IfStmt        ->  if ( Expr ) Stmt ElsePart
ElsePart      ->  else Stmt
                  | ε
FunctionBody  ->  { StmtList ReturnStmt }
ReturnStmt    ->  return Rvalue
                  | return FunctionCall
CompoundStmt  ->  { StmtList }
StmtList      ->  StmtList Stmt
                  | ε
Expr          ->  identifier = Expr
                  | Rvalue
Rvalue        ->  Rvalue Compare Mag
                  | Mag
Compare       ->  == | < | > | <= | >= | !=
Mag           ->  Mag + Term
                  | Mag - Term
                  | Term
Term          ->  Term * Factor
                  | Term / Factor
                  | Factor
Factor        ->  ( Expr )
                  | - Factor
                  | + Factor
                  | identifier
                  | FunctionCall
                  | number